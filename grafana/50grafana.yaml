apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
  namespace: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
    spec:
      initContainers:
# ###--- init ---###
#         - name: init
#           image: busybox
#           imagePullPolicy: IfNotPresent
#           command:
#             - sh
#             - -c
#             - 'chmod -R a+rwx /var/lib/grafana'
#           volumeMounts:
#           # DANGER DATA VOLUME
#             - name: data
#               mountPath: /var/lib/grafana
#           securityContext:
#             runAsUser: 0
#           # DANGER DATA VOLUME END

      containers:

      - image: grafana/grafana:5.3.0
        name: grafana
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        # resources:
        #   requests:
        #     cpu: 100m
        #     memory: 100Mi
        #   limits:
        #     cpu: 500m
        #     memory: 500Mi
        env:
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          - name: FOR_GODS_SAKE_PLEASE_REDEPLOY
            value: "1"
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /login
            port: 3000
          initialDelaySeconds: 45
          timeoutSeconds: 1
        volumeMounts:
          - name: data
            mountPath: /var/lib/grafana
          - name: config-volume
            mountPath: /etc/grafana/grafana.ini
            subPath: grafana.ini
          # - name: config-volume
          #   mountPath: /etc/grafana/provisioning/dashboards
          # - name: grafana-secret
          #   mountPath: /etc/grafana/tls
      volumes:
        - name: config-volume
          configMap:
            name: grafana-config
        # - name: grafana-secret
        #   secret:
            # secretName: grafana-secret
        - name: data
          emptyDir: {}
